use crate::models::{CommandInfo, StructInfo};
use std::collections::{HashMap, HashSet};
use std::fs;

/// Generator for vanilla TypeScript bindings without validation
pub struct VanillaTypeScriptGenerator {
    custom_types: HashSet<String>,
    known_structs: HashMap<String, StructInfo>,
}

impl VanillaTypeScriptGenerator {
    pub fn new() -> Self {
        Self {
            custom_types: HashSet::new(),
            known_structs: HashMap::new(),
        }
    }

    pub fn generate_models(
        &mut self,
        commands: &[CommandInfo],
        discovered_structs: &HashMap<String, StructInfo>,
        output_path: &str,
    ) -> Result<Vec<String>, Box<dyn std::error::Error>> {
        let mut generated_files = Vec::new();

        // Store known structs for reference
        self.known_structs = discovered_structs.clone();

        // Collect all custom types
        self.collect_custom_types(commands);

        // Generate types file
        let types_content = self.generate_types_file(commands, discovered_structs)?;
        let types_file_path = format!("{}/types.ts", output_path);
        fs::create_dir_all(output_path)?;
        fs::write(&types_file_path, types_content)?;
        generated_files.push("types.ts".to_string());

        // Generate command bindings
        let bindings_content = self.generate_command_bindings(commands)?;
        let bindings_file_path = format!("{}/commands.ts", output_path);
        fs::write(&bindings_file_path, bindings_content)?;
        generated_files.push("commands.ts".to_string());

        // Generate index file
        let index_content = self.generate_index_file(&generated_files)?;
        let index_file_path = format!("{}/index.ts", output_path);
        fs::write(&index_file_path, index_content)?;
        generated_files.push("index.ts".to_string());

        Ok(generated_files)
    }

    fn collect_custom_types(&mut self, commands: &[CommandInfo]) {
        for command in commands {
            // Collect types from parameters
            for param in &command.parameters {
                if self.is_custom_type(&param.typescript_type) {
                    self.custom_types.insert(param.typescript_type.clone());
                }
            }

            // Collect type from return type
            if self.is_custom_type(&command.return_type) {
                self.custom_types.insert(command.return_type.clone());
            }
        }
    }

    fn generate_types_file(
        &self,
        commands: &[CommandInfo],
        discovered_structs: &HashMap<String, StructInfo>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        content.push_str(&format!(
            "/**\n * Auto-generated TypeScript types for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));

        // Generate traditional TypeScript interfaces
        content.push_str(&self.generate_traditional_types(commands, discovered_structs)?);

        Ok(content)
    }

    fn generate_traditional_types(
        &self,
        commands: &[CommandInfo],
        discovered_structs: &HashMap<String, StructInfo>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        // Collect only the types actually used by commands
        let mut used_types = HashSet::new();

        for command in commands {
            // Collect types from parameters
            for param in &command.parameters {
                self.collect_referenced_types(&param.rust_type, &mut used_types);
            }

            // Collect type from return type
            self.collect_referenced_types(&command.return_type, &mut used_types);
        }

        // Generate interfaces for all discovered types (both used and nested)
        let mut all_types: HashSet<String> = used_types.clone();
        
        // Add nested types that are referenced by the used types
        self.discover_nested_dependencies(&used_types, discovered_structs, &mut all_types);
        
        for type_name in &all_types {
            if let Some(struct_info) = discovered_structs.get(type_name) {
                if struct_info.is_enum {
                    content.push_str(&self.generate_enum_type(struct_info));
                } else {
                    content.push_str(&self.generate_interface_type(struct_info));
                }
                content.push_str("\n");
            }
        }

        // Generate parameter interfaces for each command
        for command in commands {
            if !command.parameters.is_empty() {
                let params_interface = self.generate_params_interface(command);
                content.push_str(&params_interface);
                content.push_str("\n");
            }
        }

        Ok(content)
    }

    fn generate_interface_type(&self, struct_info: &StructInfo) -> String {
        let mut content = String::new();

        content.push_str(&format!("export interface {} {{\n", struct_info.name));

        for field in &struct_info.fields {
            if field.is_public {
                let optional_marker = if field.is_optional { "?" } else { "" };
                let field_name = self.to_camel_case(&field.name);
                content.push_str(&format!(
                    "  {}{}: {};\n",
                    field_name, optional_marker, field.typescript_type
                ));
            }
        }

        content.push_str("}\n");
        content
    }

    fn generate_enum_type(&self, struct_info: &StructInfo) -> String {
        let mut content = String::new();

        // For now, represent enums as union types
        content.push_str(&format!("export type {} = ", struct_info.name));

        let variants: Vec<String> = struct_info
            .fields
            .iter()
            .map(|field| format!("\"{}\"", field.name))
            .collect();

        if variants.is_empty() {
            content.push_str("never");
        } else {
            content.push_str(&variants.join(" | "));
        }

        content.push_str(";\n");
        content
    }

    fn generate_params_interface(&self, command: &CommandInfo) -> String {
        let interface_name = format!("{}Params", self.to_pascal_case(&command.name));
        let mut content = format!("export interface {} {{\n", interface_name);

        for param in &command.parameters {
            let optional_marker = if param.is_optional { "?" } else { "" };
            let param_name = self.to_camel_case(&param.name);
            content.push_str(&format!(
                "  {}{}: {};\n",
                param_name, optional_marker, param.typescript_type
            ));
        }

        content.push_str("}\n");
        content
    }

    fn generate_command_bindings(
        &self,
        commands: &[CommandInfo],
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        content.push_str(&format!(
            "/**\n * Auto-generated command bindings for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));

        content.push_str("import { invoke } from '@tauri-apps/api/core';\n");
        content.push_str("import type * as types from './types';\n\n");

        for command in commands {
            let binding = self.generate_command_binding(command);
            content.push_str(&binding);
            content.push_str("\n");
        }

        Ok(content)
    }

    fn generate_command_binding(&self, command: &CommandInfo) -> String {
        let function_name = self.to_camel_case(&command.name);
        let return_type = self.format_return_type(&command.return_type);

        let mut content = String::new();

        if command.parameters.is_empty() {
            // No parameters
            content.push_str(&format!(
                "export async function {}(): Promise<{}> {{\n  return invoke('{}');\n}}\n",
                function_name, return_type, command.name
            ));
        } else {
            // Has parameters
            let params_type = format!("types.{}Params", self.to_pascal_case(&command.name));

            content.push_str(&format!(
                "export async function {}(params: {}): Promise<{}> {{\n",
                function_name, params_type, return_type
            ));

            content.push_str(&format!("  return invoke('{}', params);\n", command.name));
            content.push_str("}\n");
        }

        content
    }

    fn format_return_type(&self, return_type: &str) -> String {
        // If it's a primitive type, return as-is
        if matches!(
            return_type,
            "string" | "number" | "boolean" | "void" | "any" | "unknown" | "null" | "undefined"
        ) {
            return return_type.to_string();
        }
        
        // If it ends with [] (array), handle the inner type
        if return_type.ends_with("[]") {
            let inner_type = &return_type[..return_type.len() - 2];
            let formatted_inner = self.format_return_type(inner_type);
            return format!("{}[]", formatted_inner);
        }
        
        // If it contains | (union type), handle each part
        if return_type.contains(" | ") {
            let parts: Vec<String> = return_type
                .split(" | ")
                .map(|part| self.format_return_type(part.trim()))
                .collect();
            return parts.join(" | ");
        }
        
        // Otherwise, it's a custom type - prefix with types.
        format!("types.{}", return_type)
    }

    fn generate_index_file(
        &self,
        generated_files: &[String],
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        content.push_str(&format!(
            "/**\n * Auto-generated TypeScript bindings for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));

        for file in generated_files {
            if file != "index.ts" {
                let module_name = file.strip_suffix(".ts").unwrap_or(file);
                content.push_str(&format!("export * from './{}';\n", module_name));
            }
        }

        Ok(content)
    }

    // Helper method to recursively collect referenced types
    pub fn collect_referenced_types(&self, rust_type: &str, used_types: &mut HashSet<String>) {
        let rust_type = rust_type.trim();
        
        // Handle Result<T, E> - extract both T and E
        if rust_type.starts_with("Result<") {
            if let Some(inner) = rust_type
                .strip_prefix("Result<")
                .and_then(|s| s.strip_suffix(">"))
            {
                if let Some(comma_pos) = inner.find(',') {
                    let ok_type = inner[..comma_pos].trim();
                    let err_type = inner[comma_pos + 1..].trim();
                    self.collect_referenced_types(ok_type, used_types);
                    self.collect_referenced_types(err_type, used_types);
                }
            }
            return;
        }

        // Handle Option<T> - extract T
        if rust_type.starts_with("Option<") {
            if let Some(inner) = rust_type
                .strip_prefix("Option<")
                .and_then(|s| s.strip_suffix(">"))
            {
                self.collect_referenced_types(inner.trim(), used_types);
            }
            return;
        }

        // Handle Vec<T> - extract T
        if rust_type.starts_with("Vec<") {
            if let Some(inner) = rust_type
                .strip_prefix("Vec<")
                .and_then(|s| s.strip_suffix(">"))
            {
                self.collect_referenced_types(inner.trim(), used_types);
            }
            return;
        }
        
        // Handle HashMap<K, V> and BTreeMap<K, V> - extract K and V
        if rust_type.starts_with("HashMap<") || rust_type.starts_with("BTreeMap<") {
            let prefix = if rust_type.starts_with("HashMap<") { "HashMap<" } else { "BTreeMap<" };
            if let Some(inner) = rust_type
                .strip_prefix(prefix)
                .and_then(|s| s.strip_suffix(">"))
            {
                if let Some(comma_pos) = inner.find(',') {
                    let key_type = inner[..comma_pos].trim();
                    let value_type = inner[comma_pos + 1..].trim();
                    self.collect_referenced_types(key_type, used_types);
                    self.collect_referenced_types(value_type, used_types);
                }
            }
            return;
        }
        
        // Handle HashSet<T> and BTreeSet<T> - extract T
        if rust_type.starts_with("HashSet<") || rust_type.starts_with("BTreeSet<") {
            let prefix = if rust_type.starts_with("HashSet<") { "HashSet<" } else { "BTreeSet<" };
            if let Some(inner) = rust_type
                .strip_prefix(prefix)
                .and_then(|s| s.strip_suffix(">"))
            {
                self.collect_referenced_types(inner.trim(), used_types);
            }
            return;
        }
        
        // Handle tuple types like (T, U, V)
        if rust_type.starts_with('(') && rust_type.ends_with(')') && rust_type != "()" {
            let inner = &rust_type[1..rust_type.len()-1];
            for part in inner.split(',') {
                self.collect_referenced_types(part.trim(), used_types);
            }
            return;
        }

        // Handle references
        if rust_type.starts_with("&") {
            let without_ref = rust_type.trim_start_matches('&');
            self.collect_referenced_types(without_ref, used_types);
            return;
        }

        // Skip primitive types
        if matches!(
            rust_type,
            "String"
                | "str"
                | "i32"
                | "i64"
                | "f32"
                | "f64"
                | "bool"
                | "usize"
                | "isize"
                | "u32"
                | "u64"
                | "()"
                | "u8"
                | "i8"
                | "u16"
                | "i16"
                | "u128"
                | "i128"
        ) {
            return;
        }

        // This is a custom type - add it to the set
        if !rust_type.is_empty() && rust_type.chars().next().map_or(false, char::is_alphabetic) {
            used_types.insert(rust_type.to_string());
        }
    }

    fn discover_nested_dependencies(
        &self,
        initial_types: &HashSet<String>,
        discovered_structs: &HashMap<String, StructInfo>,
        all_types: &mut HashSet<String>
    ) {
        let mut to_process: Vec<String> = initial_types.iter().cloned().collect();
        let mut processed: HashSet<String> = HashSet::new();
        
        while let Some(type_name) = to_process.pop() {
            if processed.contains(&type_name) {
                continue;
            }
            processed.insert(type_name.clone());
            
            if let Some(struct_info) = discovered_structs.get(&type_name) {
                for field in &struct_info.fields {
                    let mut nested_types = HashSet::new();
                    self.collect_referenced_types(&field.typescript_type, &mut nested_types);
                    
                    for nested_type in nested_types {
                        if !all_types.contains(&nested_type) && discovered_structs.contains_key(&nested_type) {
                            all_types.insert(nested_type.clone());
                            to_process.push(nested_type);
                        }
                    }
                }
            }
        }
    }

    pub fn to_pascal_case(&self, s: &str) -> String {
        s.split('_')
            .map(|word| {
                let mut chars = word.chars();
                match chars.next() {
                    None => String::new(),
                    Some(first) => first.to_uppercase().chain(chars).collect(),
                }
            })
            .collect()
    }

    pub fn to_camel_case(&self, s: &str) -> String {
        let pascal = self.to_pascal_case(s);
        let mut chars = pascal.chars();
        match chars.next() {
            None => String::new(),
            Some(first) => first.to_lowercase().chain(chars).collect(),
        }
    }

    pub fn is_custom_type(&self, ts_type: &str) -> bool {
        !matches!(
            ts_type,
            "string" | "number" | "boolean" | "void" | "any" | "unknown" | "null" | "undefined"
        ) && !ts_type.ends_with("[]")
            && !ts_type.contains(" | ")
    }
}