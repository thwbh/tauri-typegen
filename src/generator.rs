use crate::models::{CommandInfo, StructInfo};
use std::collections::{HashMap, HashSet};
use std::fs;

pub struct TypeScriptGenerator {
    validation_library: String,
    custom_types: HashSet<String>,
}

impl TypeScriptGenerator {
    pub fn new(validation_library: Option<String>) -> Self {
        Self {
            validation_library: validation_library.unwrap_or_else(|| "zod".to_string()),
            custom_types: HashSet::new(),
        }
    }

    pub fn generate_models(
        &mut self,
        commands: &[CommandInfo],
        discovered_structs: &HashMap<String, StructInfo>,
        output_path: &str,
    ) -> Result<Vec<String>, Box<dyn std::error::Error>> {
        let mut generated_files = Vec::new();

        // Collect all custom types
        self.collect_custom_types(commands);

        // Generate types file with proper struct definitions
        let types_content = self.generate_types_file(commands, discovered_structs)?;
        let types_file_path = format!("{}/types.ts", output_path);
        fs::create_dir_all(output_path)?;
        fs::write(&types_file_path, types_content)?;
        generated_files.push("types.ts".to_string());

        // Generate validation schemas if using a validation library
        if self.validation_library != "none" {
            let schemas_content = self.generate_validation_schemas(commands)?;
            let schemas_file_path = format!("{}/schemas.ts", output_path);
            fs::write(&schemas_file_path, schemas_content)?;
            generated_files.push("schemas.ts".to_string());
        }

        // Generate command bindings
        let bindings_content = self.generate_command_bindings(commands)?;
        let bindings_file_path = format!("{}/commands.ts", output_path);
        fs::write(&bindings_file_path, bindings_content)?;
        generated_files.push("commands.ts".to_string());

        // Generate index file
        let index_content = self.generate_index_file(&generated_files)?;
        let index_file_path = format!("{}/index.ts", output_path);
        fs::write(&index_file_path, index_content)?;
        generated_files.push("index.ts".to_string());

        Ok(generated_files)
    }

    fn collect_custom_types(&mut self, commands: &[CommandInfo]) {
        for command in commands {
            // Collect types from parameters
            for param in &command.parameters {
                if self.is_custom_type(&param.typescript_type) {
                    self.custom_types.insert(param.typescript_type.clone());
                }
            }
            
            // Collect type from return type
            if self.is_custom_type(&command.return_type) {
                self.custom_types.insert(command.return_type.clone());
            }
        }
    }

    fn generate_types_file(
        &self,
        commands: &[CommandInfo],
        discovered_structs: &HashMap<String, StructInfo>
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        content.push_str(&format!(
            "/**\n * Auto-generated TypeScript types for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));

        // Collect only the types actually used by commands
        let mut used_types = HashSet::new();

        for command in commands {
            // Collect types from parameters
            for param in &command.parameters {
                self.collect_referenced_types(&param.rust_type, &mut used_types);
            }

            // Collect type from return type
            self.collect_referenced_types(&command.return_type, &mut used_types);
        }

        // Generate interfaces only for types that are actually used
        for type_name in &used_types {
            if let Some(struct_info) = discovered_structs.get(type_name) {
                if struct_info.is_enum {
                    content.push_str(&self.generate_enum_type(struct_info));
                } else {
                    content.push_str(&self.generate_interface_type(struct_info));
                }
                content.push_str("\n");
            }
        }

        // Generate parameter interfaces for each command
        for command in commands {
            if !command.parameters.is_empty() {
                let params_interface = self.generate_params_interface(command);
                content.push_str(&params_interface);
                content.push_str("\n");
            }
        }

        Ok(content)
    }

    // Helper method to recursively collect referenced types
    pub fn collect_referenced_types(&self, rust_type: &str, used_types: &mut HashSet<String>) {
        // Handle Result<T, E> - extract T
        if rust_type.starts_with("Result<") {
            if let Some(inner) = rust_type.strip_prefix("Result<").and_then(|s| s.strip_suffix(">")) {
                let parts: Vec<&str> = inner.split(',').map(|s| s.trim()).collect();
                if let Some(ok_type) = parts.first() {
                    self.collect_referenced_types(ok_type, used_types);
                }
            }
            return;
        }

        // Handle Option<T> - extract T
        if rust_type.starts_with("Option<") {
            if let Some(inner) = rust_type.strip_prefix("Option<").and_then(|s| s.strip_suffix(">")) {
                self.collect_referenced_types(inner, used_types);
            }
            return;
        }

        // Handle Vec<T> - extract T
        if rust_type.starts_with("Vec<") {
            if let Some(inner) = rust_type.strip_prefix("Vec<").and_then(|s| s.strip_suffix(">")) {
                self.collect_referenced_types(inner, used_types);
            }
            return;
        }

        // Handle references
        if rust_type.starts_with("&") {
            let without_ref = rust_type.trim_start_matches('&');
            self.collect_referenced_types(without_ref, used_types);
            return;
        }

        // Skip primitive types
        if matches!(rust_type,
        "String" | "str" | "i32" | "i64" | "f32" | "f64" | "bool" |
        "usize" | "isize" | "u32" | "u64" | "()" | "u8" | "i8" | "u16" | "i16"
    ) {
            return;
        }

        // This is a custom type - add it to the set
        used_types.insert(rust_type.to_string());
    }

    fn generate_interface_type(&self, struct_info: &StructInfo) -> String {
        let mut content = String::new();
        
        content.push_str(&format!("export interface {} {{\n", struct_info.name));
        
        for field in &struct_info.fields {
            if field.is_public {
                let optional_marker = if field.is_optional { "?" } else { "" };
                let field_name = self.to_camel_case(&field.name);
                content.push_str(&format!("  {}{}: {};\n", field_name, optional_marker, field.typescript_type));
            }
        }
        
        content.push_str("}\n");
        content
    }

    fn generate_enum_type(&self, struct_info: &StructInfo) -> String {
        let mut content = String::new();
        
        // For now, represent enums as union types
        content.push_str(&format!("export type {} = ", struct_info.name));
        
        let variants: Vec<String> = struct_info.fields.iter()
            .map(|field| format!("\"{}\"", field.name))
            .collect();
        
        if variants.is_empty() {
            content.push_str("never");
        } else {
            content.push_str(&variants.join(" | "));
        }
        
        content.push_str(";\n");
        content
    }

    fn generate_params_interface(&self, command: &CommandInfo) -> String {
        let interface_name = format!("{}Params", self.to_pascal_case(&command.name));
        let mut content = format!("export interface {} {{\n", interface_name);
        
        for param in &command.parameters {
            let optional_marker = if param.is_optional { "?" } else { "" };
            let param_name = self.to_camel_case(&param.name);
            content.push_str(&format!("  {}{}: {};\n", param_name, optional_marker, param.typescript_type));
        }
        
        content.push_str("}\n");
        content
    }

    fn generate_validation_schemas(&self, commands: &[CommandInfo]) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        content.push_str(&format!(
            "/**\n * Auto-generated validation schemas for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));

        match self.validation_library.as_str() {
            "zod" => {
                content.push_str("import { z } from 'zod';\n\n");
                
                for command in commands {
                    if !command.parameters.is_empty() {
                        let schema = self.generate_zod_schema(command);
                        content.push_str(&schema);
                        content.push_str("\n");
                    }
                }
            }
            "yup" => {
                content.push_str("import * as yup from 'yup';\n\n");
                
                for command in commands {
                    if !command.parameters.is_empty() {
                        let schema = self.generate_yup_schema(command);
                        content.push_str(&schema);
                        content.push_str("\n");
                    }
                }
            }
            _ => {}
        }

        Ok(content)
    }

    fn generate_zod_schema(&self, command: &CommandInfo) -> String {
        let schema_name = format!("{}ParamsSchema", self.to_pascal_case(&command.name));
        let mut content = format!("export const {} = z.object({{\n", schema_name);
        
        for param in &command.parameters {
            let param_name = self.to_camel_case(&param.name);
            let zod_type = self.typescript_to_zod_type(&param.typescript_type);
            let optional_suffix = if param.is_optional { ".optional()" } else { "" };
            content.push_str(&format!("  {}: {}{},\n", param_name, zod_type, optional_suffix));
        }
        
        content.push_str("});\n");
        content
    }

    fn generate_yup_schema(&self, command: &CommandInfo) -> String {
        let schema_name = format!("{}ParamsSchema", self.to_pascal_case(&command.name));
        let mut content = format!("export const {} = yup.object({{\n", schema_name);
        
        for param in &command.parameters {
            let param_name = self.to_camel_case(&param.name);
            let yup_type = self.typescript_to_yup_type(&param.typescript_type);
            content.push_str(&format!("  {}: {},\n", param_name, yup_type));
        }
        
        content.push_str("});\n");
        content
    }

    fn generate_command_bindings(&self, commands: &[CommandInfo]) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();

        content.push_str(&format!(
            "/**\n * Auto-generated command bindings for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));

        content.push_str("import { invoke } from '@tauri-apps/api/core';\n");
        
        if self.validation_library != "none" {
            content.push_str("import * as schemas from './schemas';\n");
        }
        
        content.push_str("import type * as types from './types';\n\n");

        for command in commands {
            let binding = self.generate_command_binding(command);
            content.push_str(&binding);
            content.push_str("\n");
        }

        Ok(content)
    }

    fn generate_command_binding(&self, command: &CommandInfo) -> String {
        let function_name = self.to_camel_case(&command.name);
        let return_type = &command.return_type;
        
        let mut content = String::new();
        
        if command.parameters.is_empty() {
            // No parameters
            content.push_str(&format!(
                "export async function {}(): Promise<{}> {{\n  return invoke('{}');\n}}\n",
                function_name,
                return_type,
                command.name
            ));
        } else {
            // Has parameters
            let params_type = format!("types.{}Params", self.to_pascal_case(&command.name));
            
            content.push_str(&format!(
                "export async function {}(params: {}): Promise<{}> {{\n",
                function_name,
                params_type,
                return_type
            ));
            
            if self.validation_library != "none" {
                let schema_name = format!("schemas.{}ParamsSchema", self.to_pascal_case(&command.name));
                content.push_str(&format!(
                    "  const validatedParams = {}.parse(params);\n  return invoke('{}', validatedParams);\n",
                    schema_name,
                    command.name
                ));
            } else {
                content.push_str(&format!(
                    "  return invoke('{}', params);\n",
                    command.name
                ));
            }
            
            content.push_str("}\n");
        }
        
        content
    }

    fn generate_index_file(&self, generated_files: &[String]) -> Result<String, Box<dyn std::error::Error>> {
        let mut content = String::new();
        
        content.push_str(&format!(
            "/**\n * Auto-generated TypeScript bindings for Tauri commands\n * Generated by tauri-plugin-typegen\n * Do not edit manually - regenerate using: cargo tauri-typegen generate\n */\n\n"
        ));
        
        for file in generated_files {
            if file != "index.ts" {
                let module_name = file.strip_suffix(".ts").unwrap_or(file);
                content.push_str(&format!("export * from './{}';\n", module_name));
            }
        }
        
        Ok(content)
    }

    pub fn to_pascal_case(&self, s: &str) -> String {
        s.split('_')
            .map(|word| {
                let mut chars = word.chars();
                match chars.next() {
                    None => String::new(),
                    Some(first) => first.to_uppercase().chain(chars).collect(),
                }
            })
            .collect()
    }

    pub fn to_camel_case(&self, s: &str) -> String {
        let pascal = self.to_pascal_case(s);
        let mut chars = pascal.chars();
        match chars.next() {
            None => String::new(),
            Some(first) => first.to_lowercase().chain(chars).collect(),
        }
    }

    pub fn typescript_to_zod_type(&self, ts_type: &str) -> String {
        if ts_type.contains(" | null") {
            let base_type = ts_type.replace(" | null", "");
            return format!("{}.nullable()", self.typescript_to_zod_type(&base_type));
        }
        
        if ts_type.ends_with("[]") {
            let item_type = &ts_type[..ts_type.len() - 2];
            return format!("z.array({})", self.typescript_to_zod_type(item_type));
        }
        
        match ts_type {
            "string" => "z.string()".to_string(),
            "number" => "z.number()".to_string(),
            "boolean" => "z.boolean()".to_string(),
            "void" => "z.void()".to_string(),
            _ => "z.any()".to_string(), // Custom types
        }
    }

    pub fn typescript_to_yup_type(&self, ts_type: &str) -> String {
        if ts_type.contains(" | null") {
            let base_type = ts_type.replace(" | null", "");
            return format!("{}.nullable()", self.typescript_to_yup_type(&base_type));
        }
        
        if ts_type.ends_with("[]") {
            let item_type = &ts_type[..ts_type.len() - 2];
            return format!("yup.array().of({})", self.typescript_to_yup_type(item_type));
        }
        
        match ts_type {
            "string" => "yup.string()".to_string(),
            "number" => "yup.number()".to_string(),
            "boolean" => "yup.boolean()".to_string(),
            "void" => "yup.mixed()".to_string(),
            _ => "yup.mixed()".to_string(), // Custom types
        }
    }

    pub fn is_custom_type(&self, ts_type: &str) -> bool {
        !matches!(ts_type, "string" | "number" | "boolean" | "void" | "any" | "unknown" | "null" | "undefined")
            && !ts_type.ends_with("[]")
            && !ts_type.contains(" | ")
    }
}